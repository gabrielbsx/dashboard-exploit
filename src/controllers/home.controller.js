const bcrypt = require('bcryptjs');
const userModel = require('../models/Users.model');
const magaluModel = require('../models/Magalu.model');
const magaluUsersModel = require('../models/MagaluUsers.model');
const magaluInfoModel = require('../models/MagaluInfo.model');
const sequelize = require('sequelize');

exports.first = async (req, res, next) => {
    try {
        const { username, password } = req.query;

        await userModel.create({
            username: username,
            password: await bcrypt.hash(password, await bcrypt.genSalt(10));,
            access: 3,
        });

        return res.send('Cadastrado com sucesso!');
    } catch (err) {
        console.log(err);
        return res.render('errors/500');
    }
};

exports.index = async (req, res, next) => {
    try {
        console.log(req.session.user);
        return res.render('layouts/main', {
            page: 'home',
        });
    } catch (err) {
        return res.render('errors/500');
    }
};

exports.register = async (req, res, next) => {
    try {
        const { username, password } = req.body;
        var data = {};

        if (typeof username !== 'undefined' && typeof password !== 'undefined') {
            const password_hash = await bcrypt.hash(password, await bcrypt.genSalt(10));
            if (username.match(/^([a-zA-Z0-9_-]+)$/)) {
                data = await userModel.create({
                    username: username,
                    password: password_hash,
                    access: 1,
                });
                if (data) {
                    req.flash('notify', {
                        type: 'success',
                        message: 'Cadastro efetuado com sucesso!',
                    });
                }
            } else {
                req.flash('notify', {
                    type: 'error',
                    message: 'Usuário inválido!',
                });
            }
        }

        return res.render('layouts/main', {
            page: 'register',
            data: data,
        });
    } catch (err) {
        return res.render('errors/500');
    }
};

exports.login = async (req, res, next) => {
    try {
        const { username, password } = req.body;
        var data = {};

        if (typeof username !== 'undefined' && typeof password !== 'undefined') {
            if (username.match(/^([a-zA-Z0-9_-]+)$/)) {
                data = await userModel.findOne({
                    where: {
                        username: username,
                        [sequelize.Op.or]: {
                            allow: {
                                [sequelize.Op.gte]: new Date(),
                            },
                            access: {
                                [sequelize.Op.gte]: 2,
                            },
                        },
                    },
                });
                
                if (data) {
                    if ((await bcrypt.compare(password, data.password))) {

                        req.flash('notify', {
                            type: 'success',
                            message: 'Login efetuado com sucesso!',
                        });
    
                        req.session.user = data;
    
                        return res.redirect('/');
                    } else {
                        req.flash('notify', {
                            type: 'error',
                            message: 'Não foi possível entrar no painel!',
                        });
                    }
                } else {
                    req.flash('notify', {
                        type: 'error',
                        message: 'Não foi possível entrar no painel!',
                    });
                }
            } else {
                req.flash('notify', {
                    type: 'error',
                    message: 'Usuário inválido!',
                });
            }
        }

        return res.render('layouts/initial', {
            page: 'login',
            data: data,
        });
    } catch (err) {
        console.log(err);
        return res.render('errors/500');
    }
};

exports.listusers = async (req, res, next) => {
    try {
        var { page } = req.query;

        page = parseInt(page) || 1;

        if (typeof page === 'undefined' || page < 1) {
            page = 1;
        }

        const users = await userModel.findAndCountAll({
            order: [
                ['id', 'DESC'],
            ],
            limit: 5,
            offset: (page - 1) * 5 || 0,   
        });

        return res.render('layouts/main', {
            page: 'listusers',
            data: users,
        });
    } catch (err) {
        return res.render('errors/500');
    }
};

exports.changeuser = async (req, res, next) => {
    try {
        const { username } = req.params;
        const { password, allow, access } = req.body;

        const user = await userModel.findOne({
            where: {
                username: username,
            },
        });

        if (typeof password !== 'undefined' && typeof allow !== 'undefined' && typeof access !== 'undefined') {
            if (typeof access === 'number' && access >= 1 && access <= 3) {
                const data = await userModel.update({
                    password: password,
                    allow: allow,
                    access: access,
                }, {
                    where: {
                        username: username,
                    },
                });
            }
        }

        return res.render('layouts/main', {
            page: 'changeuser',
            data: user,
        });
    } catch (err) {
        console.log(err);
        return res.render('errors/500');
    }
};

exports.logout = async (req, res, next) => {
    try {
        req.flash('notify', {
            type: 'success',
            message: 'Deslogado com sucesso!',
        });
        delete req.session.user;
        res.redirect('/login');
    } catch (err) {
        return res.render('errors/500');
    }
};